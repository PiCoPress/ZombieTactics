plugins {
    id 'com.gradleup.shadow'
    id 'dev.architectury.loom' version "$fabric_loom_version"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven { url = "https://api.modrinth.com/maven" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$architectury_api_version"
    modImplementation include ("maven.modrinth:midnightlib:${project.midnightlib_version}")

    modApi "com.terraformersmc:modmenu:$modmenu_version"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    // What is alternative of this deprecation?
    input.set shadowJar.archiveFile
}
