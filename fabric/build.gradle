plugins {
    id 'com.gradleup.shadow'
    id 'dev.architectury.loom' version "$fabric_loom_version"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$architectury_api_version"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    //implementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-${project.minecraft_version}:1.16.7"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    // What is alternative of this deprecation?
    input.set shadowJar.archiveFile
}
